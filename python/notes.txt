5/02/2016
-implement select and delete mode [done? needs more testing? another look?]
-addtl crashing problem: quads with 3 solved -> uhhhh it doesn't crash now... [good enough]
-add gears
-add a button to save the linkage out
-cleanup: move joint/beam/gear adding to the technicSolver, it shouldn't be in the UI file

GEARS
-gear class
	-has a timestamp
	-has a radius
	-has a list of pointers to neighbors
	-has a beam A that it is attached to
	-has an optional beam B that it is rigidly attached to
		-when setting this, make sure that A and B share a joint J
		-also make sure that this gear is at the joint J
	-has an initial world rotation, from which all local orientations are derived

-changes to other classes
	-beams need to have lists of gears, so we can access them

-solving
	-when a gear is encountered, do a DF solve and reorient all rigidly bound beams
	-this should happen before any kind of beam traversal

-drawing
	-can't handle teeth well -> floating point gear radii
	-unless we can somehow find a GCD amongst all the gears -> horrible mess
	-or unless we make all gears the same size -> silly
	-or use nothing but snappable sizes
	-but anyway, should draw some kind of orientation something

-UX
	-additional mode
	-click a beam and drag out to add a gear
	-if you hit another gear, radius gets capped and a link is established
	-releasing click on a beam binds the gear to the beam

thoughts on cams
-if cams are just ellipoids, we can define a distance from any point on the surface to the center
-cams are only used between to adjacent beams to determine their relative orientation
-cam's center is on one beam
-cam maintains a point of contact on other beam: POC -> center is perpendicular to other beam
-when we rotate the cam, point of contact changes relative to cam as it rotates
-hmmm... but 

5/01/2016
Fix Error Handling [done]
-"bouncing" [done]
-take a look at anything that returns a 'None'
-also, maybe use exception handling to save any configs that cause a crash? [done]
	-also made this toggleable!

Prismatic Joints [done]
-modified joint
-beams should just point at each others' "other ends" in the quad solve
-maybe draw something in between?
-user interaction: add a "p" control for adding prismatic joints between beams

4/30/2016 Notes
gear systems
-so gears should all be parts of gear chains
	-all gears in one chain must be on the same beam
	-but this also means they can be attached to a joint between two beams
	-in which case they need to be rigidly bound to one of the beams of the joint
	-so it's more like every gear is attached to a beam, but only one is rigidly bound

-gear chains should be driven by a gear linked to a joint in the linkage
	-all joints have a "angle" parameter, we'll use that to drive the gear
	-so the preferred angle always needs to be updated -> use timsestamp to tell
-linking the other way: beams can be attached to gears as well?
	-this just sets the beam's rotation when encountered
	-if the joint is already rotated and it doesn't match the goal orientation currently being solved, throw an error

-solving starts with all beams, but if any joints have an attached gear, we branch out and solve the entire gear system, setting preferred angles as we go
	-so joint needs a link to gear

prismatic joints

4/24/2016 Notes
TODO
-get the file format working! [done? test?]
	-working with JSON here
	-this isn't exactly a tree, so best approach will probably be:
	-come up with names for all the joints and all the beams in the system
	-list which names go with which
	-each json dict will need name, and type
	-joints need:
		-1x string name
		-2x beam names, strings
		-2x positions along beams floats
		-1x preferred angle float
		-1x drive boolean
	-beams need:
		-1x string name
		-1x root boolean
		-1x position
		-1x length
		-list of joints

-catch and handle problem configurations
-do prismatic joints
-think about how gears should work

4/13/2016 Notes
TODO
-get editor GUI going
-need to do:
	-beam adding mode -> positioning and orientation
	-joint adding mode
	-select and reorient/delete mode
	-beam joining mode I/O + file format

	-keyboard controls for switching modes, advancing state, pause, play
	-elegant handling if something breaks

-beam adding mode [done]
	-"draw" free beams in space
-joint adding mode [done]
	-"click" intersections of beams to add joints
-select and delete/edit mode
	-"click" anything and do stuff to it
	-should be able to reorient beams about joints like in the beam test UI
	-should only be able to reorient beams that are linked to only one other
	-any other beams just get moved around

-elegant handling bad conditions
	-unsolveable quads: this probably needs to be signaled somewhere deep down in the circle solver
	-unquadded beams: print something?

-file IO


4/10/2016 Notes
TODO
-get the quad solver simple case working! [done!]
-get started on the GUI

4/8/2016 Notes
TODO
-interaction methods to add for beams:
	-should be able to position it by any joint
	-should be able to rotate it about that joint
	-hmmm... but how to do this elegantly?
	-still possible that there are two cases: point at and point away
	-we should do orientation by two joints, b/c everything else "solves" after those to joints are in place.
-add a beam interaction testing UI [done]

4/7/2016 Notes
TODO
-write unit tests for all math2d functions -> looks like radd and rsub aren't really needed [done enough]
-write the snap and orient method for beams. write a graphical test for this with mouse interaction
-test quad solver

Thoughts
-should we... restructure everything to be like a 2D skeleton?
-and specify where things have to be joined?
-or can we auto-build a 2D skeleton from a set of joints?
-it's hard to tell without a UI
-but I think my existing solution is actually more flexible

4/4/2016 Notes
10:02 PM
-solver currently breaks on line 118 in solve quad because getCommonJoint is returning None
-thought: when solving a beam, need to reposition it relative to a joint
	-this applies to orientation as well as position!
	-TODO: implement and test